{"version":3,"sources":["serviceWorker.js","Components/Loader.js","Components/GraphPop.js","Components/Case.js","Components/CaseBar.js","Components/TableRow.js","Components/Table.js","Components/Graph.js","Img/covid19.jpg","Components/NavBar.js","Components/Failed.js","Components/Footer.js","Route/Home.js","Components/GraphCountry.js","Components/GraphLine.js","Components/CountryCaseBar.js","Route/Country.js","index.js"],"names":["Boolean","window","location","hostname","match","Loader","className","GraphPop","state","close","closeChart","bind","this","setState","onClick","React","Component","Case","show","showChart","prevState","bg","props","color","button","chart","style","backgroundColor","number","type","class","CaseBar","TotalConfirmed","data","TotalRecovered","TotalDeaths","TotalActive","NewConfirmed","NewRecovered","NewDeaths","TableRow","active","table","activeNew","link","to","dataHandler","mydata","i","length","totalActive","newActive","Country","Slug","sort","a","b","map","property","options","maxLength","Table","sortByConfirmed","sortByRecoverd","sortByDeaths","sortByActive","sortByDailyConfirmed","sortByDailyRecovered","sortByDailyDeaths","sortByDailyActive","sortByCountry","dataLength","graphHeight","graphHandler","plotData","position","maxData","chartData","postion","data1","data2","start","chop","labels","datasets","label","borderColor","borderWidth","title","display","text","fontSize","Graph","innerWidth","max","handleEvent","event","target","value","name","parseInt","width","height","min","step","onChange","Navbar","src","Logo","alt","Failed","Footer","href","icon","faTwitter","faGithub","countries","global","count","output","Home","isLoading","failed","axios","get","then","response","Global","Countries","catch","error","date","GraphCountry","plotDate","countryName","console","log","GraphLine","legend","CountryCaseBar","confirmed","recovered","deaths","dailyConfirmed","dailyRecovered","dailyDeaths","confirmed_daily","recovered_daily","deaths_daily","active_daily","date_daily","country","uri","pathname","Confirmed","Recovered","Deaths","Active","Date","substring","home","ReactDOM","render","StrictMode","path","exact","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yLAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iECFSC,MAZf,WAEI,OAAO,qBAAKC,UAAU,iBAAf,SACK,sBAAKA,UAAU,SAAf,UACI,yBACA,yBACA,+BCmCLC,E,kDArCX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,MAAO,QAGX,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,gBANT,E,yDAUTC,KAAKC,SAAS,CAAEJ,MAAQ,W,+BAKxB,OAEI,sBAAKH,UAAW,cAAgBM,KAAKJ,MAAMC,MAA3C,UAEQ,wBACIH,UAAU,QACVQ,QAASF,KAAKF,WAFlB,eAMA,8BACI,cAAC,EAAD,a,GA5BDK,IAAMC,WCiFdC,E,kDAhFX,aAAc,IAAD,8BACT,gBACKT,MAAQ,CACTU,MAAO,GAIX,EAAKC,UAAY,EAAKA,UAAUR,KAAf,gBAPR,E,wDAYTC,KAAKC,UAAS,SAAAO,GAEV,MAAO,CACHF,MAAOE,EAAUF,W,+BAUzB,IAAIG,EAAKT,KAAKU,MAAMC,MAIhBC,EAAS,OAIb,OAPYZ,KAAKU,MAAMG,QAKnBD,EAAS,mBAJFZ,KAAKJ,MAAMU,KASd,sBAAKZ,UAAU,OAAOoB,MAAS,CAACC,gBAAiBN,GAAjD,UAEI,8BACKT,KAAKU,MAAMM,SAGhB,8BACKhB,KAAKU,MAAMO,OAGhB,wBAAQf,QAASF,KAAKO,UAAWW,MAAON,EAAxC,0BAIA,cAAC,EAAD,OAMR,sBAAKlB,UAAU,OAAOoB,MAAS,CAACC,gBAAiBN,GAAjD,UAEI,8BACKT,KAAKU,MAAMM,SAGhB,8BACKhB,KAAKU,MAAMO,OAGpB,wBAAQf,QAASF,KAAKO,UAAWW,MAAON,EAAxC,kC,GApEOT,IAAMC,WCuBVe,MAzBf,SAAiBT,GAEb,IAAIU,EAAiBV,EAAMW,KAAKD,eAC5BE,EAAiBZ,EAAMW,KAAKC,eAC5BC,EAAcb,EAAMW,KAAKE,YACzBC,EAAcJ,EAAiBE,EAAiBC,EAEhDE,EAAef,EAAMW,KAAKI,aAC1BC,EAAehB,EAAMW,KAAKK,aAC1BC,EAAYjB,EAAMW,KAAKM,UAE3B,OACI,sBAAKjC,UAAU,UAAf,UACI,cAAC,EAAD,CAAMsB,OAASI,EAAgBH,KAAO,uBAAuBN,MAAO,UAAUE,OAAO,IACrF,cAAC,EAAD,CAAMG,OAASM,EAAgBL,KAAO,uBAAuBN,MAAO,UAAUE,OAAO,IACrF,cAAC,EAAD,CAAMG,OAASQ,EAAaP,KAAO,oBAAoBN,MAAO,UAAUE,OAAO,IAC/E,cAAC,EAAD,CAAMG,OAASO,EAAaN,KAAO,mBAAmBN,MAAO,UAAUE,OAAO,IAC9E,cAAC,EAAD,CAAMG,OAASS,EAAcR,KAAO,uBAAuBN,MAAO,YAClE,cAAC,EAAD,CAAMK,OAASU,EAAcT,KAAO,uBAAuBN,MAAO,YAClE,cAAC,EAAD,CAAMK,OAASW,EAAWV,KAAO,mBAAmBN,MAAO,gBCKxDiB,MAxBf,SAAkBlB,GAEd,IAAImB,EAASnB,EAAMoB,MAAM,GAAG,GAAKpB,EAAMoB,MAAM,GAAG,GAAKpB,EAAMoB,MAAM,GAAG,GAChEC,EAAYrB,EAAMoB,MAAM,GAAG,GAAKpB,EAAMoB,MAAM,GAAG,GAAKpB,EAAMoB,MAAM,GAAG,GACnEE,EAAO,YAActB,EAAMoB,MAAM,GAAG,GAGxC,OACI,+BACI,6BAAI,cAAC,IAAD,CAAMG,GAAID,EAAV,SAAiBtB,EAAMoB,MAAM,OACjC,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBH,EAAjB,SACJ,6BAAI,eAAC,IAAD,CAAMI,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,SACJ,6BAAI,eAAC,IAAD,CAAMG,GAAID,EAAV,UAAiBD,EAAjB,SACJ,6BAAI,eAAC,IAAD,CAAME,GAAID,EAAV,UAAiBtB,EAAMoB,MAAM,GAAG,GAAhC,aChBhB,SAASI,EAAYC,GAGjB,IADA,IAAId,EAAO,GACFe,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAAK,CACpC,IAAIE,EAAcH,EAAOC,GAAGhB,eAAiBe,EAAOC,GAAGd,eAAiBa,EAAOC,GAAGb,YAC9EgB,EAAYJ,EAAOC,GAAGhB,eAAiBe,EAAOC,GAAGd,eAAiBa,EAAOC,GAAGb,YAEhFF,EAAKe,GAAK,CAACD,EAAOC,GAAGI,QAASL,EAAOC,GAAGhB,eAC5Be,EAAOC,GAAGd,eAAgBa,EAAOC,GAAGb,YACpCe,EAAaH,EAAOC,GAAGX,aACvBU,EAAOC,GAAGV,aAAcS,EAAOC,GAAGT,UAAWY,EAAWJ,EAAOC,GAAGK,MAK9EpB,EAAKqB,MAAK,SAASC,EAAGC,GAClB,OAAQA,EAAE,GAAKD,EAAE,MAIrB,IAAK,IAAIP,EAAI,EAAGA,EAAIf,EAAKgB,OAAQD,IAE7Bf,EAAKe,GAAK,CAACA,EAAI,EAAGf,EAAKe,IAI3B,OAAOf,EAAKwB,KAAI,SAAAC,GAAQ,OAAI,cAAC,EAAD,CAAUhB,MAAOgB,O,IC1BjDC,EACA1B,EACA2B,EDiIWC,E,kDApGX,aAAc,IAAD,8BAET,gBAEKrD,MAAQ,CACTsD,iBAAgB,EAChBC,gBAAe,EACfC,cAAa,EACbC,cAAa,EACbC,sBAAqB,EACrBC,sBAAqB,EACrBC,mBAAkB,EAClBC,mBAAkB,EAClBC,eAAc,GAbT,E,2XAiET,OACI,qBAAKhE,UAAU,eAAf,SAEI,wBAAOA,UAAU,QAAjB,UAEI,gCAEI,+BACI,qCACA,yCACA,gDACA,gDACA,6CACA,8CACA,sDACA,sDACA,sDACA,uDAKR,gCACKwC,EAAYlC,KAAKU,MAAMW,iB,GA1F5BlB,IAAMC,W,QC1BtBuD,EAAa,GACbC,EAAc,GAGlB,SAASC,EAAa5C,EAAM6C,EAAUC,EAAUC,GAE5CF,EAASpB,MAAK,SAASC,EAAGC,GACtB,OAAQA,EAAE,GAAKD,EAAE,MAIrB,IAAIsB,EA4BR,SAAc5C,EAAM6C,EAASF,GACzB,IAAIG,EAAQ,GACRC,EAAQ,GACRC,EAASH,EAAUF,EAEvBhB,EAAY3B,EAAKgB,OAEjB,IAAI,IAAID,EAAI,EAAGA,EAAI4B,EAAS5B,IACxB+B,EAAM/B,GAAKf,EAAKe,EAAIiC,GAAO,GAC3BD,EAAMhC,GAAKf,EAAKe,EAAIiC,GAAO,GAG/B,MAAO,CAACF,EAAOC,GAxCCE,CAAKR,EAAUC,EAAUC,GAGzC3C,EAAO,CACHkD,OAASN,EAAU,GACnBO,SAAU,CAAC,CACPC,MAAO,aACP1D,gBAAiB,wBACjB2D,YAAa,mBACbC,YAAa,EACbtD,KAAM4C,EAAU,MAMxBlB,EAAU,CACN6B,MAAM,CACFC,SAAQ,EACRC,KAAM,gBALFf,EAAWC,GAKgB,OAASD,EAAW,UAAW9C,EAAM,oBACpE8D,SAAS,K,IAyFNC,E,kDA9DX,aAAc,IAAD,6BACT,eAEG3F,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KAGlB,EAAKhE,MAAQ,CACTmE,SAAWJ,EACXuB,IAAKlC,GAKT,EAAKmC,YAAc,EAAKA,YAAYpF,KAAjB,gBAfV,E,wDAmBDqF,GAAO,IAAD,EAEQA,EAAMC,OAAfC,GAFC,EAEPC,KAFO,EAEDD,OAEbtF,KAAKC,SAAS,CACN8D,SAAWyB,SAASF,O,+BAc5B,OAPGjG,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KAIlBC,EAAa7D,KAAKU,MAAMO,KAAMjB,KAAKU,MAAMW,KAAMrB,KAAKJ,MAAMmE,SAAUJ,GAEhE,sBAAKjE,UAAU,QAAf,UACI,8BACI,cAAC,MAAD,CACI+F,MAAO,IACPC,OAAQ9B,EACRvC,KAAMA,EACN0B,QAASA,MAIjB,uBACI9B,KAAK,QAAQ0E,IAAKhC,EAClBuB,IAAKlC,EACLsC,MAAOtF,KAAKJ,MAAMmE,SAClB6B,KAAM,EACNC,SAAU7F,KAAKmF,qB,GAxDfhF,IAAMC,WChEX,MAA0B,oCCY1B0F,MATf,WAEI,OACI,sBAAKpG,UAAU,SAAf,UACI,qBAAKqG,IAAKC,EAAMtG,UAAU,cAAcuG,IAAI,SADhD,oBCaOC,MAff,SAAgBxF,GAEZ,OACI,qBAAKhB,UAAU,SAAf,SACI,iCACI,sBAAKA,UAAU,aAAf,mDAEI,cAAC,IAAD,CAAMuC,GAAI,IAAV,8B,gBCWLkE,MAff,SAAgBzF,GAEZ,OACI,sBAAKhB,UAAU,SAAf,UAEI,mBAAGA,UAAU,UAAU0G,KAAK,0CAA5B,SACI,cAAC,IAAD,CAAiBC,KAAMC,QAE3B,mBAAI5G,UAAU,UAAU0G,KAAK,mCAA7B,SACI,cAAC,IAAD,CAAiBC,KAAME,YCDnCC,EAAY,GACZC,EAAS,GAuEb,SAASpF,EAAKJ,GAGV,IAFA,IAAIyF,EAAQ,EACRC,EAAS,GACLvE,EAAI,EAAGA,EAAIoE,EAAUnE,OAAQD,IAAI,CACrC,OAAOnB,GACH,IAAK,YACD0F,EAAOD,GAAS,CAACF,EAAUpE,GAAGI,QAASgE,EAAUpE,GAAGX,cACxD,MACA,IAAK,SACDkF,EAAOD,GAAS,CAACF,EAAUpE,GAAGI,QAASgE,EAAUpE,GAAGT,WACxD,MACA,IAAK,YACDgF,EAAOD,GAAS,CAACF,EAAUpE,GAAGI,QAASgE,EAAUpE,GAAGV,cACxD,MACA,IAAK,SACDiF,EAAOD,GAAS,CAACF,EAAUpE,GAAGI,QAASgE,EAAUpE,GAAGX,aAAe+E,EAAUpE,GAAGT,UAAY6E,EAAUpE,GAAGV,cAMjHgF,IAEJ,OAAOC,EAGIC,IC3GX7D,EACA1B,EACA2B,EDyGW4D,E,kDA7FX,aAAc,IAAD,8BACT,gBACKhH,MAAM,CACPiH,WAAY,EACZC,QAAS,GAJJ,E,gEAYQ,IAAD,OAIhBC,IAAMC,IAFI,aAEKC,MAAK,YAAY,IAAV5F,EAAS,EAATA,KAElBoF,EAASpF,EAAK6F,SAASC,OACvBX,EAAYnF,EAAK6F,SAASE,UAE1B,EAAKnH,SAAS,CACV4G,WAAY,OAGjBQ,OAAM,SAAAC,GAEL,EAAKrH,SAAS,CACV4G,WAAY,EACZC,QAAS,S,+BASjB,OAAG9G,KAAKJ,MAAMiH,UACH,cAAC,EAAD,IACR7G,KAAKJ,MAAMkH,OACH,cAAC,EAAD,IACJ,gCACK,cAAC,EAAD,IACA,sBAAKpH,UAAU,YAAf,UACI,qBAAKA,UAAU,WAAf,wBACA,cAAC,EAAD,CAAS2B,KAAMoF,IAEf,sBAAK/G,UAAU,gBAAf,UACI,cAAC,EAAD,CAAO2B,KAAMA,EAAK,aAAcJ,KAAM,cACtC,cAAC,EAAD,CAAOI,KAAMA,EAAK,UAAWJ,KAAM,WACnC,cAAC,EAAD,CAAOI,KAAMA,EAAK,aAAcJ,KAAM,cACtC,cAAC,EAAD,CAAOI,KAAMA,EAAK,UAAWJ,KAAM,cAGvC,cAAC,EAAD,CAAOI,KAAMmF,OAGjB,cAAC,EAAD,W,GA5DDrG,IAAMC,WCTrBuD,EAAa,GACbC,EAAc,GAiClB,SAASU,EAAKjD,EAAMkG,EAAMrD,EAASF,GAE/B,IAAIG,EAAQ,GACRC,EAAQ,GACRC,EAASH,EAAUF,EAEvBhB,EAAY3B,EAAKgB,OAEjB,IAAI,IAAID,EAAI,EAAGA,EAAI4B,EAAS5B,IACxB+B,EAAM/B,GAAKf,EAAKe,EAAIiC,GACpBD,EAAMhC,GAAKmF,EAAKnF,EAAIiC,GAExB,MAAO,CAACF,EAAOC,G,IClDfrB,EACA1B,EACA2B,EDkIWwE,E,kDA3EX,aAAc,IAAD,6BACT,eAGGnI,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KAGlB,EAAKhE,MAAQ,CACTC,MAAQ,OACRkE,SAAWJ,EACXuB,IAAKlC,GAIT,EAAKmC,YAAc,EAAKA,YAAYpF,KAAjB,gBAhBV,E,wDAqBDqF,GAAO,IAAD,EAEQA,EAAMC,OAAfC,GAFC,EAEPC,KAFO,EAEDD,OAEbtF,KAAKC,SAAS,CACN8D,SAAWyB,SAASF,O,0CAM5BtF,KAAKC,SAAS,CACV8D,SAAWyB,SAASxC,O,+BAcxB,OAPG3D,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KA3F1B,SAAsB3C,EAAM6C,EAAU2D,EAAU1D,EAAUC,GAAyB,IAAhB0D,EAAe,uDAAH,GAEvEzD,EAAYK,EAAKR,EAAU2D,EAAU1D,EAAUC,GAEnD3C,EAAO,CACHkD,OAASN,EAAU,GACnBO,SAAU,CAAC,CACPC,MAAOiD,EACP3G,gBAAiB,wBACjB2D,YAAa,mBACbC,YAAa,EACbtD,KAAM4C,EAAU,MAMxBlB,EAAU,CACN6B,MAAM,CACFC,SAAQ,EACRC,KAAM,wBALFf,EAAWC,GAKwB,WAAaD,EAAW,IAAM9C,EAAO,YAAayG,EACzF3C,SAAS,KAyEblB,CAAa7D,KAAKU,MAAMO,KAAMjB,KAAKU,MAAMW,KAAMrB,KAAKU,MAAM6G,KAAMvH,KAAKJ,MAAMmE,SAAUJ,EAAY3D,KAAKU,MAAMgH,aAGxG,sBAAKhI,UAAU,QAAf,UAEI,cAAC,MAAD,CACIA,UAAU,QACV+F,MAAO,IACPC,OAAQ9B,EACRvC,KAAMA,EACN0B,QAASA,IAEb,uBACI9B,KAAK,QACL0E,IAAKhC,EACLuB,IAAKlC,EACLsC,MAAOtF,KAAKJ,MAAMmE,SAClB6B,KAAM,EACNC,SAAU7F,KAAKmF,qB,GAjERhF,IAAMC,WCpD7BuD,EAAa,GACbC,EAAc,GAoClB,SAASU,GAAKjD,EAAMkG,EAAMrD,EAASF,GAE/B,IAAIG,EAAQ,GACRC,EAAQ,GACRC,EAASH,EAAUF,EAEvB2D,QAAQC,IAAI,WAAa5D,GACzBhB,EAAY3B,EAAKgB,OAEjB,IAAI,IAAID,EAAI,EAAGA,EAAI4B,EAAS5B,IACxB+B,EAAM/B,GAAKf,EAAKe,EAAIiC,GACpBD,EAAMhC,GAAKmF,EAAKnF,EAAIiC,GAExB,MAAO,CAACF,EAAOC,G,IA+EJyD,G,kDAxEX,aAAc,IAAD,6BACT,eAEGxI,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KAGlB,EAAKhE,MAAQ,CACTC,MAAQ,OACRkE,SAAWJ,EACXuB,IAAKlC,GAKT,EAAKmC,YAAc,EAAKA,YAAYpF,KAAjB,gBAhBV,E,wDAqBDqF,GAAO,IAAD,EAEQA,EAAMC,OAAfC,GAFC,EAEPC,KAFO,EAEDD,OAEbtF,KAAKC,SAAS,CACN8D,SAAWyB,SAASF,O,0CAM5BtF,KAAKC,SAAS,CACV8D,SAAWyB,SAASxC,O,+BAexB,OAPG3D,OAAO4F,WAAa,MACnBtB,EAAa,GACbC,EAAc,KAhG1B,SAAsB3C,EAAM6C,EAAU2D,EAAU1D,EAAUC,GAAyB,IAAhB0D,EAAe,uDAAH,GAEvEzD,EAAYK,GAAKR,EAAU2D,EAAU1D,EAAUC,GAEnD3C,EAAO,CACHkD,OAASN,EAAU,GACnBO,SAAU,CAAC,CACPC,MAAO,UACP1D,gBAAiB,wBACjB2D,YAAa,mBACbC,YAAa,EACbtD,KAAM4C,EAAU,MAMxBlB,EAAU,CACN6B,MAAM,CACFC,SAAQ,EACRC,KAAM,aALFf,EAAWC,GAKa,WAAaD,EAAW,IAAM9C,EAAO,YAAayG,EAC9E3C,SAAS,IAEb+C,OAAO,CACHjD,SAAQ,EACRd,SAAU,QA0EdF,CAAa7D,KAAKU,MAAMO,KAAMjB,KAAKU,MAAMW,KAAMrB,KAAKU,MAAM6G,KAAMvH,KAAKJ,MAAMmE,SAAUJ,EAAY3D,KAAKU,MAAMgH,aAGxG,sBAAKhI,UAAU,QAAf,UAEI,cAAC,OAAD,CACI2B,KAAMA,EACNoE,MAAO,IACPC,OAAQ9B,EACRb,QAASA,IAEb,uBACI9B,KAAK,QACL0E,IAAKhC,EACLuB,IAAKlC,EACLsC,MAAOtF,KAAKJ,MAAMmE,SAClB6B,KAAM,EACNC,SAAU7F,KAAKmF,qB,GAjEXhF,IAAMC,WCff2H,OA7Cf,SAAwBrH,GAEpB,IAAIsH,EAAYtH,EAAMsH,UAClBC,EAAYvH,EAAMuH,UAClBpG,EAASnB,EAAMmB,OACfqG,EAASxH,EAAMwH,OAEnBF,EAAUtF,MAAK,SAASC,EAAGC,GACvB,OAAQD,EAAIC,KAGhBqF,EAAUvF,MAAK,SAASC,EAAGC,GACvB,OAAQD,EAAIC,KAGhBf,EAAOa,MAAK,SAASC,EAAGC,GACpB,OAAQD,EAAIC,KAGhBsF,EAAOxF,MAAK,SAASC,EAAGC,GACpB,OAAQD,EAAIC,KAGhB,IAAIuF,EAAiBH,EAAUA,EAAU3F,OAAS,GAAK2F,EAAUA,EAAU3F,OAAS,GAChF+F,EAAiBH,EAAUA,EAAU5F,OAAS,GAAK4F,EAAUA,EAAU5F,OAAS,GAEhFgG,GADcxG,EAAOA,EAAOQ,OAAS,GAAKR,EAAOA,EAAOQ,OAAS,GACnD6F,EAAOA,EAAO7F,OAAS,GAAK6F,EAAOA,EAAO7F,OAAS,IAErE,OACI,sBAAK3C,UAAU,UAAf,UAEI,cAAC,EAAD,CAAMsB,OAASgH,EAAUA,EAAU3F,OAAS,GAAIpB,KAAO,uBAAuBN,MAAO,YACrF,cAAC,EAAD,CAAMK,OAASiH,EAAUA,EAAU5F,OAAS,GAAIpB,KAAO,uBAAuBN,MAAO,YACrF,cAAC,EAAD,CAAMK,OAASa,EAAOA,EAAOQ,OAAS,GAAIpB,KAAO,oBAAoBN,MAAO,YAC5E,cAAC,EAAD,CAAMK,OAASkH,EAAOA,EAAO7F,OAAS,GAAIpB,KAAO,mBAAmBN,MAAO,YAC3E,cAAC,EAAD,CAAMK,OAASmH,EAAgBlH,KAAO,uBAAuBN,MAAO,YACpE,cAAC,EAAD,CAAMK,OAASoH,EAAgBnH,KAAO,uBAAuBN,MAAO,YACpE,cAAC,EAAD,CAAMK,OAASqH,EAAapH,KAAO,mBAAmBN,MAAO,gBC7BrEqH,GAAY,GACZC,GAAY,GACZC,GAAS,GACTrG,GAAS,GACT0F,GAAO,GAEPe,GAAkB,GAClBC,GAAkB,GAClBC,GAAe,GACfC,GAAe,GACfC,GAAa,GAEbC,GAAU,GAkKCnG,G,kDA9JX,aAAc,IAAD,8BACT,gBACK5C,MAAM,CACPiH,WAAY,EACZC,QAAQ,GAJH,E,gEAUO,IAAD,OAEX8B,EAAM,OAASvJ,OAAOC,SAASuJ,SACnC9B,IAAMC,IAAI4B,GAAK3B,MAAK,YAAY,IAAV5F,EAAS,EAATA,KAClBsH,GAAUtH,EAAK,GAAGmB,QAElB,IAAI,IAAIJ,EAAI,EAAGA,EAAIf,EAAKgB,OAAQD,IAE5B4F,GAAU5F,GAAKf,EAAKe,GAAG0G,UACvBb,GAAU7F,GAAKf,EAAKe,GAAG2G,UACvBb,GAAO9F,GAAKf,EAAKe,GAAG4G,OACpBnH,GAAOO,GAAKf,EAAKe,GAAG6G,OACpB1B,GAAKnF,GAAKf,EAAKe,GAAG8G,KAAKC,UAAU,EAAG,IAIxCnB,GAAUtF,MAAK,SAASC,EAAGC,GACvB,OAAQA,EAAID,KAGhBsF,GAAUvF,MAAK,SAASC,EAAGC,GACvB,OAAQA,EAAID,KAGhBuF,GAAOxF,MAAK,SAASC,EAAGC,GACpB,OAAQA,EAAID,KAGhBd,GAAOa,MAAK,SAASC,EAAGC,GACpB,OAAQA,EAAID,KAGhB4E,GAAK7E,OACL,IAAI,IAAIN,EAAI,EAAGA,EAAIf,EAAKgB,OAAQD,IAE5BkG,GAAgBlG,EAAI,GAAK4F,GAAU5F,EAAI,GAAK4F,GAAU5F,GACtDmG,GAAgBnG,EAAI,GAAK6F,GAAU7F,EAAI,GAAK6F,GAAU7F,GACtDoG,GAAapG,EAAI,GAAK8F,GAAO9F,EAAI,GAAK8F,GAAO9F,GAC7CqG,GAAarG,EAAI,GAAKP,GAAOO,EAAI,GAAKP,GAAOO,GAC7CsG,GAAWtG,EAAI,GAAKmF,GAAKnF,GAAG+G,UAAU,EAAG,IAI7C,EAAKlJ,SAAS,CACV4G,WAAY,EACZC,QAAS,S,+BAajB,OAAG9G,KAAKJ,MAAMiH,UACH,cAAC,EAAD,IAER7G,KAAKJ,MAAMkH,OACH,cAAC,EAAD,IAEJ,gCACK,cAAC,EAAD,IACA,sBAAKpH,UAAU,YAAf,UACI,sBAAKA,UAAU,WAAf,UAA2BiJ,GAA3B,WACA,cAAC,GAAD,CACIX,UAAWA,GACXC,UAAWA,GACXpG,OAAQA,GACRqG,OAAQA,KAIZ,sBAAKxI,UAAU,gBAAf,UAEI,cAAC,EAAD,CACI2B,KAAM2G,GACNT,KAAMA,GACNtG,KAAK,YACLyG,YAAaiB,KAGjB,cAAC,EAAD,CACItH,KAAM4G,GACNV,KAAMA,GACNtG,KAAK,YACLyG,YAAaiB,KAGjB,cAAC,EAAD,CACItH,KAAMQ,GACN0F,KAAMA,GACNtG,KAAK,SACLyG,YAAaiB,KAGjB,cAAC,EAAD,CACItH,KAAM6G,GACNX,KAAMA,GACNtG,KAAK,SACLyG,YAAaiB,KAGjB,cAAC,GAAD,CACItH,KAAMiH,GACNf,KAAMmB,GACNzH,KAAK,YACLyG,YAAaiB,KAGjB,cAAC,GAAD,CACItH,KAAMkH,GACNhB,KAAMmB,GACNzH,KAAK,YACLyG,YAAaiB,KAGjB,cAAC,GAAD,CACItH,KAAMoH,GACNlB,KAAMmB,GACNzH,KAAK,SACLyG,YAAaiB,KAGjB,cAAC,GAAD,CACItH,KAAMmH,GACNjB,KAAMmB,GACNzH,KAAK,SACLyG,YAAaiB,WAOzB,cAAC,EAAD,W,GAtJExI,IAAMC,WCftBgJ,GAAO,kBAAM,cAAC,EAAD,KACnBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAWN,KACxC,cAAC,IAAD,CAAOI,KAAK,SAASC,OAAO,EAAMC,UAAWN,KAC7C,cAAC,IAAD,CAAOI,KAAK,WAAYE,UAAWlH,UAGvCmH,SAASC,eAAe,SjBgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9C,MAAK,SAAA+C,GACJA,EAAaC,gBAEd5C,OAAM,SAAAC,GACLK,QAAQL,MAAMA,EAAM4C,a","file":"static/js/main.d6dc8a6d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\r\nimport \"../Styles/Loader.css\"\r\n\r\n\r\nfunction Loader(){\r\n\r\n    return(<div className=\"loader-wrapper\">\r\n                <div className=\"loader\">\r\n                    <span></span>\r\n                    <span></span>\r\n                    <span></span>\r\n                </div>\r\n            </div>\r\n        )\r\n}\r\n\r\nexport default Loader\r\n\r\n\r\n","import React, {useState} from 'react'\r\nimport Loader from './Loader';\r\n//import {Line} from 'react-chartjs-2'\r\n\r\n\r\n\r\nclass GraphPop extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            close: \"show\"\r\n        }\r\n\r\n        this.closeChart = this.closeChart.bind(this)\r\n    }\r\n\r\n    closeChart(){\r\n        this.setState({ close : \"hide\" })\r\n    }\r\n\r\n    render(){\r\n     \r\n        return(\r\n\r\n            <div className={\"GraphModal \" + this.state.close}>\r\n\r\n                    <button \r\n                        className=\"close\" \r\n                        onClick={this.closeChart}> \r\n                        X \r\n                    </button>\r\n                    \r\n                    <div>\r\n                        <Loader />\r\n                    </div>\r\n\r\n            </div>\r\n            \r\n            )\r\n    }\r\n\r\n    }\r\n\r\n\r\nexport default GraphPop","import React  from 'react'\r\nimport GraphUI from './GraphPop'\r\nimport GraphPop from './GraphPop';\r\n\r\n\r\nclass Case extends React.Component{\r\n   \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            show : false\r\n        }\r\n\r\n        //Binds the events\r\n        this.showChart = this.showChart.bind(this)\r\n    }\r\n\r\n    showChart(){\r\n\r\n        this.setState(prevState => {\r\n\r\n            return {\r\n                show : prevState.show ? false : true\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n    \r\n\r\n    render(){\r\n\r\n        let bg = this.props.color\r\n        let chart = this.props.chart\r\n        let show = this.state.show\r\n\r\n        let button = \"hide\"\r\n        if(chart)\r\n            button = \"show  chart-btn\"\r\n\r\n        if(show)\r\n            \r\n            return(\r\n                <div className=\"case\" style = {{backgroundColor: bg}} > \r\n        \r\n                    <div>\r\n                        {this.props.number}\r\n                    </div>\r\n        \r\n                    <div>\r\n                        {this.props.type}\r\n                    </div>\r\n\r\n                    <button onClick={this.showChart} class={button}> View Chart </button>\r\n                    \r\n                    \r\n\r\n                    <GraphPop />\r\n\r\n                </div>\r\n            )\r\n\r\n        return(\r\n            <div className=\"case\" style = {{backgroundColor: bg}} > \r\n\r\n                <div>\r\n                    {this.props.number}\r\n                </div>\r\n\r\n                <div>\r\n                    {this.props.type}\r\n                </div>\r\n     \r\n            <button onClick={this.showChart} class={button}> View Chart  </button>\r\n           \r\n            </div>\r\n        \r\n        )\r\n\r\n    }\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\nexport default Case","import React from 'react'\r\nimport Case from './Case'\r\n\r\nfunction CaseBar(props){\r\n\r\n    let TotalConfirmed = props.data.TotalConfirmed;\r\n    let TotalRecovered = props.data.TotalRecovered;\r\n    let TotalDeaths = props.data.TotalDeaths;\r\n    let TotalActive = TotalConfirmed - TotalRecovered - TotalDeaths;\r\n\r\n    let NewConfirmed = props.data.NewConfirmed;\r\n    let NewRecovered = props.data.NewRecovered;\r\n    let NewDeaths = props.data.NewDeaths;\r\n\r\n    return(\r\n        <div className=\"caseBar\">\r\n            <Case number ={TotalConfirmed} type = \"Total Confirmed Case\" color =\"#000000\" chart={true} />\r\n            <Case number ={TotalRecovered} type = \"Total Recovered Case\" color =\"#12f432\" chart={true} />\r\n            <Case number ={TotalActive} type = \"Total Active Case\" color =\"#701722\" chart={true} />\r\n            <Case number ={TotalDeaths} type = \"Total Death Case\" color =\"#ff0000\" chart={true} />\r\n            <Case number ={NewConfirmed} type = \"Daily Confirmed Case\" color =\"#000000\"/>\r\n            <Case number ={NewRecovered} type = \"Daily Recovered Case\" color =\"#12f432\"/>\r\n            <Case number ={NewDeaths} type = \"Daily Death Case\" color =\"#ff0000\"/>\r\n        </div>\r\n        )\r\n}\r\n\r\n\r\nexport default CaseBar","import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction TableRow(props){\r\n    \r\n    let active = props.table[1][1] - props.table[1][2] - props.table[1][3];\r\n    let activeNew = props.table[1][5] - props.table[1][6] - props.table[1][7];\r\n    let link = \"/country/\" + props.table[1][9]\r\n\r\n\r\n    return( \r\n        <tr> \r\n            <td><Link to={link}>{props.table[0]}</Link></td>\r\n            <td><Link to={link}>{props.table[1][0]} </Link></td>\r\n            <td><Link to={link}>{props.table[1][1]} </Link></td>\r\n            <td><Link to={link}>{props.table[1][2]} </Link></td>\r\n            <td><Link to={link}>{active} </Link></td>\r\n            <td><Link to={link}>{props.table[1][3]} </Link></td>\r\n            <td><Link to={link}>{props.table[1][5]} </Link></td>\r\n            <td><Link to={link}>{props.table[1][6]} </Link></td>\r\n            <td><Link to={link}>{activeNew} </Link></td>\r\n            <td><Link to={link}>{props.table[1][7]} </Link></td>\r\n        </tr>\r\n\r\n            )\r\n}\r\n\r\nexport default TableRow\r\n\r\n/*\r\n\r\n \r\n*/","import React from 'react'\r\nimport TableRow from './TableRow'\r\n\r\n\r\n//function to handle json data\r\nfunction dataHandler(mydata){\r\n\r\n    var data = []\r\n    for (let i = 0; i < mydata.length; i++) {\r\n        let totalActive = mydata[i].TotalConfirmed - mydata[i].TotalRecovered - mydata[i].TotalDeaths\r\n        let newActive = mydata[i].TotalConfirmed - mydata[i].TotalRecovered - mydata[i].TotalDeaths\r\n        \r\n        data[i] = [mydata[i].Country, mydata[i].TotalConfirmed, \r\n                    mydata[i].TotalRecovered, mydata[i].TotalDeaths, \r\n                    totalActive, mydata[i].NewConfirmed, \r\n                    mydata[i].NewRecovered, mydata[i].NewDeaths, newActive, mydata[i].Slug] \r\n                \r\n        }\r\n\r\n      \r\n        data.sort(function(a, b){\r\n            return  b[1] - a[1]\r\n        })\r\n\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            data[i] = [i + 1, data[i]]\r\n                    \r\n        }\r\n\r\n        return data.map(property => <TableRow table={property} />)\r\n}\r\n\r\nclass Table extends React.Component{\r\n\r\n    constructor(){\r\n\r\n        super()\r\n\r\n        this.state = {\r\n            sortByConfirmed:true,\r\n            sortByRecoverd:false,\r\n            sortByDeaths:false,\r\n            sortByActive:false,\r\n            sortByDailyConfirmed:false,\r\n            sortByDailyRecovered:false,\r\n            sortByDailyDeaths:false,\r\n            sortByDailyActive:false,\r\n            sortByCountry:false\r\n        }\r\n        /*\r\n        this.countrySort = this.countrySort.bind(this)\r\n        this.confirmedSort = this.confirmedSort.bind(this)\r\n        this.recoveredSort = this.recoveredSort.bind(this)\r\n        this.activeSort = this.activeSort.bind(this)\r\n        this.deathSort = this.deathSort.bind(this)\r\n        this.dailyConfirmedSort = this.dailyConfirmedSort.bind(this)\r\n        this.dailyRecoveredSort = this.dailyRecoveredSort.bind(this)\r\n        this.dailyRiseSort = this.dailyRiseSort.bind(this)\r\n        this.dailyDeathsSort = this.dailyDeathsSort.bind(this)\r\n\r\n*/\r\n    }\r\n\r\n    countrySort(){\r\n\r\n    }\r\n\r\n    confirmedSort(){\r\n\r\n    }\r\n\r\n    recoveredSort(){\r\n\r\n    }\r\n\r\n    activeSort(){\r\n\r\n    }\r\n\r\n    deathSort(){\r\n\r\n    }\r\n\r\n    dailyRecoveredSort(){\r\n\r\n    }\r\n\r\n    dailyRiseSort(){\r\n\r\n    }\r\n\r\n    dailyDeathsSort(){\r\n\r\n    }\r\n\r\n\r\n \r\n    render(){\r\n    \r\n        return(\r\n            <div className=\"tableWrapper\">\r\n\r\n                <table className=\"table\"> \r\n\r\n                    <thead>\r\n\r\n                        <tr>\r\n                            <th>S/N</th>\r\n                            <th >Country</th>\r\n                            <th >Confirmed Case</th>\r\n                            <th>Recovered Case</th>\r\n                            <th>Active Case</th>\r\n                            <th>Total Deaths</th>\r\n                            <th>Daily Confirmed Case</th>\r\n                            <th>Daily Recovered Case</th>\r\n                            <th>Daily Rise in Cases </th>\r\n                            <th>Daily Death Case</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    \r\n                    <tbody>\r\n                        {dataHandler(this.props.data)}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Table","import React from 'react'\r\nimport {Bar} from 'react-chartjs-2'\r\n\r\n\r\n//Variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 20\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, position, maxData){\r\n    \r\n    plotData.sort(function(a, b){\r\n        return  b[1] - a[1]\r\n    })\r\n\r\n\r\n    var chartData = chop(plotData, position, maxData)\r\n\r\n    \r\n    data = {\r\n        labels : chartData[0],\r\n        datasets: [{\r\n            label: \"Countrires\",\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[1]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing Top \" + start + \" to \" + position + \" Daily \"+ type +\" case by Country \",\r\n            fontSize:15\r\n        },\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, postion, maxData){\r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start][0]\r\n        data2[i] = data[i + start][1]\r\n    }\r\n\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass Graph extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        this.state = {\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n\r\n        \r\n        //Binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n    \r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.state.position, dataLength)\r\n        return(\r\n            <div className=\"Graph\">\r\n                <div>\r\n                    <Bar\r\n                        width={100}\r\n                        height={graphHeight}\r\n                        data={data}\r\n                        options={options}\r\n                        />\r\n                \r\n                </div>\r\n                <input \r\n                    type=\"range\" min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default Graph","export default __webpack_public_path__ + \"static/media/covid19.a5aac664.jpg\";","import React from 'react'\r\nimport Logo from '../Img/covid19.jpg'\r\n\r\nfunction Navbar(){\r\n\r\n    return(\r\n        <div className=\"navbar\">\r\n            <img src={Logo} className=\"navbar-logo\" alt=\"logo\"/>\r\n             Covid19 Info </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Navbar from './NavBar'\r\n\r\nfunction Failed(props){\r\n\r\n    return(\r\n        <div className=\"failed\">\r\n            <center>\r\n                <div className=\"failed-msg\">\r\n                    Failed To Retrieve data please reload.\r\n                    <Link to={\"/\"}> reload </Link>\r\n                </div>\r\n                \r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Failed","import React from 'react'\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\r\nimport { faGithub, faTwitter} from \"@fortawesome/free-brands-svg-icons\"\r\n\r\n\r\n   \r\n\r\nfunction Footer(props){\r\n\r\n    return(\r\n        <div className=\"footer\">\r\n          \r\n            <a className=\"socials\" href=\"https://www.twitter.com/evuetaphajoshua\">\r\n                <FontAwesomeIcon icon={faTwitter} />\r\n            </a>\r\n            <a  className=\"socials\" href=\"https://www.github.com/joshuajee\">\r\n                <FontAwesomeIcon icon={faGithub} />\r\n            </a>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import React from 'react'\r\nimport axios from 'axios'\r\n\r\nimport '../Styles/Loader.css'\r\n\r\nimport CaseBar from '../Components/CaseBar'\r\nimport Table from '../Components/Table'\r\nimport Graph from '../Components/Graph'\r\n//import GraphUI from '../Components/GraphUI';\r\nimport Loader from '../Components/Loader'\r\nimport Failed from '../Components/Failed'\r\nimport Navbar from '../Components/NavBar'\r\nimport Footer from '../Components/Footer'\r\n\r\n\r\nvar countries = []\r\nvar global = []\r\n\r\nclass Home extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            isLoading : true,\r\n            failed : false\r\n        }\r\n\r\n       \r\n    }\r\n    \r\n\r\n     //sends an api request when the components mount\r\n     componentDidMount(){\r\n\r\n        let uri = \"/api/home\"\r\n\r\n        axios.get(uri).then(({data}) =>{\r\n            \r\n            global = data.response.Global\r\n            countries = data.response.Countries\r\n\r\n            this.setState({\r\n                isLoading : false\r\n            })\r\n\r\n        }).catch(error => {\r\n\r\n            this.setState({\r\n                isLoading : false,\r\n                failed : true\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n   \r\n    render(){\r\n        if(this.state.isLoading)\r\n            return(<Loader />)\r\n        if(this.state.failed)\r\n            return(<Failed />)\r\n        return(<div>\r\n                    <Navbar />\r\n                    <div className=\"container\">\r\n                        <div className=\"stat-bar\">World Info</div>\r\n                        <CaseBar data={global} />\r\n                        \r\n                        <div className=\"Graph-Wrapper\">\r\n                            <Graph data={data(\"Confirmed\")} type={\"Confirmed\"}/>\r\n                            <Graph data={data(\"Deaths\")} type={\"Deaths\"}/>\r\n                            <Graph data={data(\"Recovered\")} type={\"Recovered\"}/>\r\n                            <Graph data={data(\"Active\")} type={\"Active\"}/>\r\n                        </div>\r\n\r\n                        <Table data={countries} />\r\n                        \r\n                    </div>\r\n                    <Footer />\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nfunction data(type){\r\n    let count = 0\r\n    let output = []\r\n    for(let i = 0; i < countries.length; i++){\r\n        switch(type){\r\n            case \"Confirmed\":\r\n                output[count] = [countries[i].Country, countries[i].NewConfirmed]\r\n            break\r\n            case \"Deaths\":\r\n                output[count] = [countries[i].Country, countries[i].NewDeaths]\r\n            break\r\n            case \"Recovered\":\r\n                output[count] = [countries[i].Country, countries[i].NewRecovered]\r\n            break\r\n            case \"Active\":\r\n                output[count] = [countries[i].Country, countries[i].NewConfirmed - countries[i].NewDeaths - countries[i].NewRecovered]\r\n            break\r\n            default:\r\n                break\r\n        }\r\n        \r\n        count++\r\n    }\r\n    return output\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport {Bar} from 'react-chartjs-2'\r\n\r\n\r\n\r\n//variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 30\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, plotDate, position, maxData, countryName=\"\"){\r\n\r\n    var chartData = chop(plotData, plotDate, position, maxData)\r\n\r\n    data = {\r\n        labels : chartData[1],\r\n        datasets: [{\r\n            label: countryName,\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[0]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing culmulative \" + start + \" to day \" + position + \" \" + type + \" case in \"+ countryName,\r\n            fontSize:15\r\n        }\r\n       \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, date, postion, maxData){\r\n    \r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start]\r\n        data2[i] = date[i + start]\r\n    }\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass GraphCountry extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        \r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        this.state = {\r\n            close : \"show\",\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n        \r\n        //binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n        })\r\n    }\r\n\r\n    //method for positioning the chart at the end\r\n    componentDidMount(){\r\n        this.setState({\r\n            position : parseInt(maxLength)\r\n        })\r\n    }\r\n\r\n  \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.props.date, this.state.position, dataLength, this.props.countryName)\r\n\r\n        return(\r\n            <div className=\"Graph\">\r\n\r\n                <Bar\r\n                    className=\"chart\"\r\n                    width={100}\r\n                    height={graphHeight}\r\n                    data={data}\r\n                    options={options} />\r\n\r\n                <input \r\n                    type=\"range\" \r\n                    min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n\r\n\r\n          \r\n\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default GraphCountry","import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\n\r\n//variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 30;\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, plotDate, position, maxData, countryName=\"\"){\r\n\r\n    var chartData = chop(plotData, plotDate, position, maxData)\r\n\r\n    data = {\r\n        labels : chartData[1],\r\n        datasets: [{\r\n            label: \"Country\",\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[0]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing  \" + start + \" to day \" + position + \" \" + type + \" case in \"+ countryName,\r\n            fontSize:15\r\n        },\r\n        legend:{\r\n            display:false,\r\n            position: \"top\"\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, date, postion, maxData){\r\n    \r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    console.log(\"MaxData \" + maxData)\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start]\r\n        data2[i] = date[i + start]\r\n    }\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass GraphLine extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n      \r\n        this.state = {\r\n            close : \"show\",\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n\r\n        \r\n        //binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n        })\r\n    }\r\n\r\n    //method for positioning the chart at the end\r\n    componentDidMount(){\r\n        this.setState({\r\n            position : parseInt(maxLength)\r\n        })\r\n    }\r\n\r\n    \r\n  \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.props.date, this.state.position, dataLength, this.props.countryName)\r\n\r\n        return(\r\n            <div className=\"Graph\">\r\n\r\n                <Line\r\n                    data={data}\r\n                    width={100}\r\n                    height={graphHeight}\r\n                    options={options} />\r\n\r\n                <input \r\n                    type=\"range\" \r\n                    min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default GraphLine","import React from 'react'\r\nimport Case from './Case'\r\n\r\nfunction CountryCaseBar(props){\r\n\r\n    let confirmed = props.confirmed\r\n    let recovered = props.recovered\r\n    let active = props.active\r\n    let deaths = props.deaths\r\n\r\n    confirmed.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    recovered.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    active.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    deaths.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    let dailyConfirmed = confirmed[confirmed.length - 1] - confirmed[confirmed.length - 2]\r\n    let dailyRecovered = recovered[recovered.length - 1] - recovered[recovered.length - 2]\r\n    let dailyActive = active[active.length - 1] - active[active.length - 2]\r\n    let dailyDeaths = deaths[deaths.length - 1] - deaths[deaths.length - 2]\r\n\r\n    return(\r\n        <div className=\"caseBar\">\r\n\r\n            <Case number ={confirmed[confirmed.length - 1]} type = \"Total Confirmed Case\" color =\"#000000\"  />\r\n            <Case number ={recovered[recovered.length - 1]} type = \"Total Recovered Case\" color =\"#12f432\" />\r\n            <Case number ={active[active.length - 1]} type = \"Total Active Case\" color =\"#701722\" />\r\n            <Case number ={deaths[deaths.length - 1]} type = \"Total Death Case\" color =\"#ff0000\" />\r\n            <Case number ={dailyConfirmed} type = \"Daily Confirmed Case\" color =\"#000000\" />\r\n            <Case number ={dailyRecovered} type = \"Daily Recovered Case\" color =\"#12f432\" />\r\n            <Case number ={dailyDeaths} type = \"Daily Death Case\" color =\"#ff0000\" />\r\n        \r\n\r\n        </div>\r\n        )\r\n}\r\n\r\n\r\nexport default CountryCaseBar","import React from 'react'\r\nimport axios from 'axios'\r\nimport Loader from '../Components/Loader'\r\nimport GraphCountry from '../Components/GraphCountry'\r\nimport GraphLine from '../Components/GraphLine'\r\nimport CountryCaseBar from '../Components/CountryCaseBar'\r\nimport Navbar from '../Components/NavBar'\r\nimport Footer from '../Components/Footer'\r\nimport Failed from '../Components/Failed'\r\n\r\n\r\nvar confirmed = []\r\nvar recovered = []\r\nvar deaths = []\r\nvar active = []\r\nvar date = []\r\n\r\nvar confirmed_daily = []\r\nvar recovered_daily = []\r\nvar deaths_daily = []\r\nvar active_daily = []\r\nvar date_daily = []\r\n\r\nvar country = \"\"\r\n\r\nclass Country extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            isLoading : true,\r\n            failed: false\r\n        }\r\n\r\n    }\r\n\r\n    //sends an api request when the components mount\r\n    componentDidMount(){\r\n\r\n        let uri = \"/api\" + window.location.pathname\r\n        axios.get(uri).then(({data}) =>{\r\n            country = data[0].Country\r\n            \r\n            for(let i = 0; i < data.length; i++){\r\n\r\n                confirmed[i] = data[i].Confirmed\r\n                recovered[i] = data[i].Recovered\r\n                deaths[i] = data[i].Deaths\r\n                active[i] = data[i].Active\r\n                date[i] = data[i].Date.substring(0, 10)\r\n                \r\n            }\r\n\r\n            confirmed.sort(function(a, b){\r\n                return  b - a\r\n            })\r\n        \r\n            recovered.sort(function(a, b){\r\n                return  b - a\r\n            })\r\n\r\n            deaths.sort(function(a, b){\r\n                return  b - a\r\n            })\r\n\r\n            active.sort(function(a, b){\r\n                return  b - a\r\n            })\r\n\r\n            date.sort()\r\n            for(let i = 1; i < data.length; i++){\r\n\r\n                confirmed_daily[i - 1] = confirmed[i - 1] - confirmed[i]\r\n                recovered_daily[i - 1] = recovered[i - 1] - recovered[i]\r\n                deaths_daily[i - 1] = deaths[i - 1] - deaths[i]\r\n                active_daily[i - 1] = active[i - 1] - active[i]\r\n                date_daily[i - 1] = date[i].substring(0, 10)\r\n                \r\n            }\r\n\r\n            this.setState({\r\n                isLoading : false,\r\n                failed : false\r\n            })\r\n\r\n        })\r\n\r\n    }\r\n\r\n    \r\n\r\n    render(){\r\n    \r\n     \r\n\r\n        if(this.state.isLoading)\r\n            return(<Loader />)\r\n        \r\n        if(this.state.failed)\r\n            return(<Failed />)\r\n\r\n        return(<div>\r\n                    <Navbar />\r\n                    <div className=\"container\">\r\n                        <div className=\"stat-bar\">{country} Info</div>\r\n                        <CountryCaseBar \r\n                            confirmed={confirmed}\r\n                            recovered={recovered}\r\n                            active={active}\r\n                            deaths={deaths}\r\n                        \r\n                            />\r\n\r\n                        <div className=\"Graph-Wrapper\">\r\n\r\n                            <GraphCountry\r\n                                data={confirmed} \r\n                                date={date} \r\n                                type=\"Confirmed\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphCountry\r\n                                data={recovered} \r\n                                date={date} \r\n                                type=\"Recovered\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphCountry\r\n                                data={active} \r\n                                date={date} \r\n                                type=\"Active\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphCountry\r\n                                data={deaths} \r\n                                date={date} \r\n                                type=\"Deaths\"\r\n                                countryName={country}\r\n                                />\r\n                            \r\n                            <GraphLine\r\n                                data={confirmed_daily} \r\n                                date={date_daily} \r\n                                type=\"Confirmed\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphLine \r\n                                data={recovered_daily} \r\n                                date={date_daily} \r\n                                type=\"Recovered\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphLine \r\n                                data={active_daily} \r\n                                date={date_daily} \r\n                                type=\"Active\"\r\n                                countryName={country}\r\n                                />\r\n\r\n                            <GraphLine \r\n                                data={deaths_daily} \r\n                                date={date_daily} \r\n                                type=\"Deaths\"\r\n                                countryName={country}\r\n                                />\r\n                            \r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <Footer />\r\n\r\n                </div>\r\n\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Country","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport './index.css';\r\nimport './Styles/Styles.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport Home from './Route/Home'\r\nimport Country from './Route/Country'\r\n\r\n\r\nconst home = () => <Home />\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Route path=\"/\" exact={true} component={home} />\r\n      <Route path=\"/world\" exact={true} component={home} />\r\n      <Route path=\"/country\"  component={Country} />\r\n    </BrowserRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n)\r\n\r\n\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}