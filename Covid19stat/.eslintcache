[{"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\index.js":"1","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\serviceWorker.js":"2","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Route\\Country.js":"3","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Route\\Home.js":"4","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Loader.js":"5","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\NavBar.js":"6","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Failed.js":"7","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphLine.js":"8","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\CaseBar.js":"9","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphCountry.js":"10","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\CountryCaseBar.js":"11","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Footer.js":"12","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Table.js":"13","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Graph.js":"14","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\TableRow.js":"15","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Case.js":"16","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphPop.js":"17"},{"size":889,"mtime":1613045415741,"results":"18","hashOfConfig":"19"},{"size":5086,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":5549,"mtime":1612911129972,"results":"21","hashOfConfig":"19"},{"size":3189,"mtime":1613042006595,"results":"22","hashOfConfig":"19"},{"size":363,"mtime":1612911129963,"results":"23","hashOfConfig":"19"},{"size":270,"mtime":1612911129965,"results":"24","hashOfConfig":"19"},{"size":469,"mtime":1612911129952,"results":"25","hashOfConfig":"19"},{"size":2961,"mtime":1612911129959,"results":"26","hashOfConfig":"19"},{"size":1241,"mtime":1613934898644,"results":"27","hashOfConfig":"19"},{"size":2913,"mtime":1612911129957,"results":"28","hashOfConfig":"19"},{"size":1665,"mtime":1612911129950,"results":"29","hashOfConfig":"19"},{"size":617,"mtime":1612911129954,"results":"30","hashOfConfig":"19"},{"size":3843,"mtime":1613045478380,"results":"31","hashOfConfig":"19"},{"size":2709,"mtime":1612911129956,"results":"32","hashOfConfig":"19"},{"size":807,"mtime":1613042006594,"results":"33","hashOfConfig":"19"},{"size":1748,"mtime":1612911129947,"results":"34","hashOfConfig":"19"},{"size":895,"mtime":1612911129961,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1ny1fab",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"38"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"38"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"38"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"38"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"38"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"38"},"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\index.js",[],["79","80"],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\serviceWorker.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Route\\Country.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Route\\Home.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Loader.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\NavBar.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Failed.js",["81"],"import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport Navbar from './NavBar'\r\n\r\nfunction Failed(props){\r\n\r\n    return(\r\n        <div className=\"failed\">\r\n            <center>\r\n                <div className=\"failed-msg\">\r\n                    Failed To Retrieve data please reload.\r\n                    <Link to={\"/\"}> reload </Link>\r\n                </div>\r\n                \r\n            </center>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Failed","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphLine.js",["82"],"import React from 'react'\r\nimport {Line} from 'react-chartjs-2'\r\n\r\n\r\n//variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 30;\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, plotDate, position, maxData, countryName=\"\"){\r\n\r\n    var chartData = chop(plotData, plotDate, position, maxData)\r\n\r\n    data = {\r\n        labels : chartData[1],\r\n        datasets: [{\r\n            label: \"Country\",\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[0]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing  \" + start + \" to day \" + position + \" \" + type + \" case in \"+ countryName,\r\n            fontSize:15\r\n        },\r\n        legend:{\r\n            display:false,\r\n            position: \"top\"\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, date, postion, maxData){\r\n    \r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    console.log(\"MaxData \" + maxData)\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start]\r\n        data2[i] = date[i + start]\r\n    }\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass GraphLine extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n      \r\n        this.state = {\r\n            close : \"show\",\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n\r\n        \r\n        //binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n        })\r\n    }\r\n\r\n    //method for positioning the chart at the end\r\n    componentDidMount(){\r\n        this.setState({\r\n            position : parseInt(maxLength)\r\n        })\r\n    }\r\n\r\n    \r\n  \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.props.date, this.state.position, dataLength, this.props.countryName)\r\n\r\n        return(\r\n            <div className=\"Graph\">\r\n\r\n                <Line\r\n                    data={data}\r\n                    width={100}\r\n                    height={graphHeight}\r\n                    options={options} />\r\n\r\n                <input \r\n                    type=\"range\" \r\n                    min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default GraphLine","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\CaseBar.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphCountry.js",["83"],"import React from 'react'\r\nimport {Bar} from 'react-chartjs-2'\r\n\r\n\r\n\r\n//variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 30\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, plotDate, position, maxData, countryName=\"\"){\r\n\r\n    var chartData = chop(plotData, plotDate, position, maxData)\r\n\r\n    data = {\r\n        labels : chartData[1],\r\n        datasets: [{\r\n            label: countryName,\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[0]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing culmulative \" + start + \" to day \" + position + \" \" + type + \" case in \"+ countryName,\r\n            fontSize:15\r\n        }\r\n       \r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, date, postion, maxData){\r\n    \r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start]\r\n        data2[i] = date[i + start]\r\n    }\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass GraphCountry extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        \r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        this.state = {\r\n            close : \"show\",\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n        \r\n        //binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n        })\r\n    }\r\n\r\n    //method for positioning the chart at the end\r\n    componentDidMount(){\r\n        this.setState({\r\n            position : parseInt(maxLength)\r\n        })\r\n    }\r\n\r\n  \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.props.date, this.state.position, dataLength, this.props.countryName)\r\n\r\n        return(\r\n            <div className=\"Graph\">\r\n\r\n                <Bar\r\n                    className=\"chart\"\r\n                    width={100}\r\n                    height={graphHeight}\r\n                    data={data}\r\n                    options={options} />\r\n\r\n                <input \r\n                    type=\"range\" \r\n                    min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n\r\n\r\n          \r\n\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default GraphCountry","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\CountryCaseBar.js",["84"],"import React from 'react'\r\nimport Case from './Case'\r\n\r\nfunction CountryCaseBar(props){\r\n\r\n    let confirmed = props.confirmed\r\n    let recovered = props.recovered\r\n    let active = props.active\r\n    let deaths = props.deaths\r\n\r\n    confirmed.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    recovered.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    active.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    deaths.sort(function(a, b){\r\n        return  a - b\r\n    })\r\n\r\n    let dailyConfirmed = confirmed[confirmed.length - 1] - confirmed[confirmed.length - 2]\r\n    let dailyRecovered = recovered[recovered.length - 1] - recovered[recovered.length - 2]\r\n    let dailyActive = active[active.length - 1] - active[active.length - 2]\r\n    let dailyDeaths = deaths[deaths.length - 1] - deaths[deaths.length - 2]\r\n\r\n    return(\r\n        <div className=\"caseBar\">\r\n\r\n            <Case number ={confirmed[confirmed.length - 1]} type = \"Total Confirmed Case\" color =\"#000000\"  />\r\n            <Case number ={recovered[recovered.length - 1]} type = \"Total Recovered Case\" color =\"#12f432\" />\r\n            <Case number ={active[active.length - 1]} type = \"Total Active Case\" color =\"#701722\" />\r\n            <Case number ={deaths[deaths.length - 1]} type = \"Total Death Case\" color =\"#ff0000\" />\r\n            <Case number ={dailyConfirmed} type = \"Daily Confirmed Case\" color =\"#000000\" />\r\n            <Case number ={dailyRecovered} type = \"Daily Recovered Case\" color =\"#12f432\" />\r\n            <Case number ={dailyDeaths} type = \"Daily Death Case\" color =\"#ff0000\" />\r\n        \r\n\r\n        </div>\r\n        )\r\n}\r\n\r\n\r\nexport default CountryCaseBar","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Footer.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Table.js",["85"],"import {Redirect, withRouter} from 'react-router-dom'\r\n\r\nimport React from 'react'\r\nimport TableRow from './TableRow'\r\n\r\n//function to handle json data\r\nfunction dataHandler(mydata, clickEvent){\r\n\r\n    var data = []\r\n    for (let i = 0; i < mydata.length; i++) {\r\n        let totalActive = mydata[i].TotalConfirmed - mydata[i].TotalRecovered - mydata[i].TotalDeaths\r\n        let newActive = mydata[i].TotalConfirmed - mydata[i].TotalRecovered - mydata[i].TotalDeaths\r\n        \r\n        data[i] = [mydata[i].Country, mydata[i].TotalConfirmed, \r\n                    mydata[i].TotalRecovered, mydata[i].TotalDeaths, \r\n                    totalActive, mydata[i].NewConfirmed, \r\n                    mydata[i].NewRecovered, mydata[i].NewDeaths, newActive, mydata[i].Slug] \r\n                \r\n        }\r\n\r\n      \r\n        data.sort(function(a, b){\r\n            return  b[1] - a[1]\r\n        })\r\n\r\n\r\n        for (let i = 0; i < data.length; i++) {\r\n\r\n            data[i] = [i + 1, data[i]]\r\n                    \r\n        }\r\n\r\n        return data.map(property => <TableRow table={property} clickEvent={clickEvent}  />)\r\n}\r\n\r\nclass Table extends React.Component{\r\n\r\n    constructor(){\r\n\r\n        super()\r\n\r\n        this.state = {\r\n            sortByConfirmed:true,\r\n            sortByRecoverd:false,\r\n            sortByDeaths:false,\r\n            sortByActive:false,\r\n            sortByDailyConfirmed:false,\r\n            sortByDailyRecovered:false,\r\n            sortByDailyDeaths:false,\r\n            sortByDailyActive:false,\r\n            sortByCountry:false,\r\n            redirect:false,\r\n            link:\"home\"\r\n        }\r\n        /*\r\n        this.countrySort = this.countrySort.bind(this)\r\n        this.confirmedSort = this.confirmedSort.bind(this)\r\n        this.recoveredSort = this.recoveredSort.bind(this)\r\n        this.activeSort = this.activeSort.bind(this)\r\n        this.deathSort = this.deathSort.bind(this)\r\n        this.dailyConfirmedSort = this.dailyConfirmedSort.bind(this)\r\n        this.dailyRecoveredSort = this.dailyRecoveredSort.bind(this)\r\n        this.dailyRiseSort = this.dailyRiseSort.bind(this)\r\n        this.dailyDeathsSort = this.dailyDeathsSort.bind(this)\r\n\r\n*/\r\n        this.clickEvent = this.clickEvent.bind(this)\r\n    }\r\n\r\n    countrySort(){\r\n\r\n    }\r\n\r\n    confirmedSort(){\r\n\r\n    }\r\n\r\n    recoveredSort(){\r\n\r\n    }\r\n\r\n    activeSort(){\r\n\r\n    }\r\n\r\n    deathSort(){\r\n\r\n    }\r\n\r\n    dailyRecoveredSort(){\r\n\r\n    }\r\n\r\n    dailyRiseSort(){\r\n\r\n    }\r\n\r\n    dailyDeathsSort(){\r\n\r\n    }\r\n\r\n\r\n    clickEvent(link){\r\n        this.setState({\r\n            link:link,\r\n            redirect:true\r\n        })\r\n    }\r\n\r\n \r\n    render(){\r\n\r\n        if (this.state.redirect) {\r\n            this.setState({\r\n                redirect:false\r\n            })\r\n            return <Redirect to={this.state.link}/>;\r\n          }\r\n    \r\n        return(\r\n            <div className=\"tableWrapper\">\r\n\r\n                <table className=\"table\"> \r\n\r\n                    <thead>\r\n\r\n                        <tr>\r\n                            <th>S/N</th>\r\n                            <th >Country</th>\r\n                            <th >Confirmed Case</th>\r\n                            <th>Recovered Case</th>\r\n                            <th>Active Case</th>\r\n                            <th>Total Deaths</th>\r\n                            <th>Daily Confirmed Case</th>\r\n                            <th>Daily Recovered Case</th>\r\n                            <th>Daily Rise in Cases </th>\r\n                            <th>Daily Death Case</th>\r\n                        </tr>\r\n\r\n                    </thead>\r\n                    \r\n                    <tbody>\r\n                        {dataHandler(this.props.data, this.clickEvent)}\r\n                    </tbody>\r\n\r\n                </table>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Table","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Graph.js",["86"],"import React from 'react'\r\nimport {Bar} from 'react-chartjs-2'\r\n\r\n\r\n//Variables\r\nvar options;\r\nvar data;\r\nvar maxLength;\r\nvar dataLength = 20\r\nvar graphHeight = 50\r\n\r\n\r\nfunction graphHandler(type, plotData, position, maxData){\r\n    \r\n    plotData.sort(function(a, b){\r\n        return  b[1] - a[1]\r\n    })\r\n\r\n\r\n    var chartData = chop(plotData, position, maxData)\r\n\r\n    \r\n    data = {\r\n        labels : chartData[0],\r\n        datasets: [{\r\n            label: \"Countrires\",\r\n            backgroundColor: 'rgba(75, 192, 192, 1)',\r\n            borderColor: 'rgba(0, 0, 0, 1)',\r\n            borderWidth: 2,\r\n            data: chartData[1]\r\n        }]\r\n    }\r\n\r\n    let start = position - maxData\r\n\r\n    options = {\r\n        title:{\r\n            display:true,\r\n            text: \"Showing Top \" + start + \" to \" + position + \" Daily \"+ type +\" case by Country \",\r\n            fontSize:15\r\n        },\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nfunction chop(data, postion, maxData){\r\n    let data1 = []\r\n    let data2 = []\r\n    let start  = postion - maxData\r\n\r\n    maxLength = data.length\r\n\r\n    for(let i = 0; i < maxData; i++){\r\n        data1[i] = data[i + start][0]\r\n        data2[i] = data[i + start][1]\r\n    }\r\n\r\n    return [data1, data2]\r\n}\r\n\r\n\r\n\r\nclass Graph extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n        }\r\n\r\n        this.state = {\r\n            position : dataLength,\r\n            max: maxLength\r\n        }\r\n\r\n        \r\n        //Binds the events\r\n        this.handleEvent = this.handleEvent.bind(this)\r\n    }\r\n\r\n    //method for scrolling the chart\r\n    handleEvent(event){\r\n\r\n        const {name, value} = event.target\r\n\r\n        this.setState({\r\n                position : parseInt(value)\r\n    \r\n        })\r\n    }\r\n    \r\n    render(){\r\n\r\n        if(window.innerWidth < 600){\r\n            dataLength = 10\r\n            graphHeight = 100\r\n\r\n        }\r\n\r\n        graphHandler(this.props.type, this.props.data, this.state.position, dataLength)\r\n        return(\r\n            <div className=\"Graph\">\r\n                <div>\r\n                    <Bar\r\n                        width={100}\r\n                        height={graphHeight}\r\n                        data={data}\r\n                        options={options}\r\n                        />\r\n                \r\n                </div>\r\n                <input \r\n                    type=\"range\" min={dataLength} \r\n                    max={maxLength} \r\n                    value={this.state.position} \r\n                    step={1} \r\n                    onChange={this.handleEvent} />\r\n            </div>\r\n            )\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default Graph","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\TableRow.js",[],"C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\Case.js",["87"],"import React  from 'react'\r\nimport GraphUI from './GraphPop'\r\nimport GraphPop from './GraphPop';\r\n\r\n\r\nclass Case extends React.Component{\r\n   \r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            show : false\r\n        }\r\n\r\n        //Binds the events\r\n        this.showChart = this.showChart.bind(this)\r\n    }\r\n\r\n    showChart(){\r\n\r\n        this.setState(prevState => {\r\n\r\n            return {\r\n                show : prevState.show ? false : true\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n    \r\n\r\n    render(){\r\n\r\n        let bg = this.props.color\r\n        let chart = this.props.chart\r\n        let show = this.state.show\r\n\r\n        let button = \"hide\"\r\n        if(chart)\r\n            button = \"show  chart-btn\"\r\n\r\n        if(show)\r\n            \r\n            return(\r\n                <div className=\"case\" style = {{backgroundColor: bg}} > \r\n        \r\n                    <div>\r\n                        {this.props.number}\r\n                    </div>\r\n        \r\n                    <div>\r\n                        {this.props.type}\r\n                    </div>\r\n\r\n                    <button onClick={this.showChart} class={button}> View Chart </button>\r\n                    \r\n                    \r\n\r\n                    <GraphPop />\r\n\r\n                </div>\r\n            )\r\n\r\n        return(\r\n            <div className=\"case\" style = {{backgroundColor: bg}} > \r\n\r\n                <div>\r\n                    {this.props.number}\r\n                </div>\r\n\r\n                <div>\r\n                    {this.props.type}\r\n                </div>\r\n     \r\n            <button onClick={this.showChart} class={button}> View Chart  </button>\r\n           \r\n            </div>\r\n        \r\n        )\r\n\r\n    }\r\n\r\n} \r\n\r\n\r\n\r\n\r\n\r\nexport default Case","C:\\Users\\Joshua\\Desktop\\node apps\\Covid19\\Covid19stat\\src\\Components\\GraphPop.js",["88"],"import React, {useState} from 'react'\r\nimport Loader from './Loader';\r\n//import {Line} from 'react-chartjs-2'\r\n\r\n\r\n\r\nclass GraphPop extends React.Component{\r\n\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n            close: \"show\"\r\n        }\r\n\r\n        this.closeChart = this.closeChart.bind(this)\r\n    }\r\n\r\n    closeChart(){\r\n        this.setState({ close : \"hide\" })\r\n    }\r\n\r\n    render(){\r\n     \r\n        return(\r\n\r\n            <div className={\"GraphModal \" + this.state.close}>\r\n\r\n                    <button \r\n                        className=\"close\" \r\n                        onClick={this.closeChart}> \r\n                        X \r\n                    </button>\r\n                    \r\n                    <div>\r\n                        <Loader />\r\n                    </div>\r\n\r\n            </div>\r\n            \r\n            )\r\n    }\r\n\r\n    }\r\n\r\n\r\nexport default GraphPop",{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","replacedBy":"92"},{"ruleId":"93","severity":1,"message":"94","line":3,"column":8,"nodeType":"95","messageId":"96","endLine":3,"endColumn":14},{"ruleId":"93","severity":1,"message":"97","line":89,"column":16,"nodeType":"95","messageId":"96","endLine":89,"endColumn":20},{"ruleId":"93","severity":1,"message":"97","line":86,"column":16,"nodeType":"95","messageId":"96","endLine":86,"endColumn":20},{"ruleId":"93","severity":1,"message":"98","line":29,"column":9,"nodeType":"95","messageId":"96","endLine":29,"endColumn":20},{"ruleId":"93","severity":1,"message":"99","line":1,"column":19,"nodeType":"95","messageId":"96","endLine":1,"endColumn":29},{"ruleId":"93","severity":1,"message":"97","line":88,"column":16,"nodeType":"95","messageId":"96","endLine":88,"endColumn":20},{"ruleId":"93","severity":1,"message":"100","line":2,"column":8,"nodeType":"95","messageId":"96","endLine":2,"endColumn":15},{"ruleId":"93","severity":1,"message":"101","line":1,"column":16,"nodeType":"95","messageId":"96","endLine":1,"endColumn":24},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'Navbar' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","'dailyActive' is assigned a value but never used.","'withRouter' is defined but never used.","'GraphUI' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]